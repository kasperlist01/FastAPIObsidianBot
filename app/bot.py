import os

import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from transcriber import transcribe_audio
from openai_client import generate_claude_response, generate_gpt_response

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
FASTAPI_URL = os.getenv("FASTAPI_URL")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


class PlanStates(StatesGroup):
    waiting_for_plan = State()
    plan_ready = State()
    editing_plan = State()


def get_plan_actions_inline_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Obsidian", callback_data="send_obsidian")
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_plan")
    kb.adjust(1)
    return kb


async def get_moderated_text(text: str, state: FSMContext) -> str | tuple[str, str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (GPT –∏–ª–∏ Cloud), –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    state_data = await state.get_data()
    model_choice = state_data.get("model", "cloud")
    if model_choice == "gpt":
        return await generate_gpt_response(text)
    return await generate_claude_response(text)


@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤—ã–¥–∞—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞.
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –æ—Ç —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, "
        "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Obsidian.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.\n\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /gpt –∏–ª–∏ /cloud (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Cloud)."
    )
    await state.set_state(PlanStates.waiting_for_plan)


@dp.message(Command("gpt"))
async def set_gpt(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞.
    """
    await state.update_data(model="gpt")
    await message.answer("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: GPT")


@dp.message(Command("cloud"))
async def set_cloud(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Cloud (Claude) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞.
    """
    await state.update_data(model="cloud")
    await message.answer("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: Cloud")


@dp.message(F.content_type == "voice")
async def handle_voice_plan(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–ª–∞–Ω.
    –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = editing_plan, —Ç–æ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
    """
    current_state = await state.get_state()
    if current_state is None:
        await state.set_state(PlanStates.waiting_for_plan)
        current_state = await state.get_state()

    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_message = await message.answer("üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–¥—ë—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
    voice = message.voice
    file_info = await bot.get_file(voice.file_id)
    temp_file = f"temp_{voice.file_unique_id}.ogg"
    await bot.download_file(file_info.file_path, destination=temp_file)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) —Ç–µ–∫—Å—Ç
    transcription = (await transcribe_audio(temp_file)).strip()
    os.remove(temp_file)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    plan_date, moderated_text = await get_moderated_text(transcription, state)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(original_text=transcription, moderated_text=moderated_text, plan_date=plan_date)

    kb = get_plan_actions_inline_keyboard().as_markup()

    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=status_message.message_id,
        text="‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã."
    )
    await message.answer(
        text=f"üìù –¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å (–ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏):\n\n{moderated_text}",
        reply_markup=kb
    )
    await state.set_state(PlanStates.plan_ready)


@dp.message(F.content_type == "text")
async def handle_text_plan(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–ª–∞–Ω.
    –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = editing_plan, —Ç–æ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
    """
    current_state = await state.get_state()
    if current_state is None:
        await state.set_state(PlanStates.waiting_for_plan)
        current_state = await state.get_state()

    # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    original_text = message.text.strip()
    if not original_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    plan_date, moderated_text = await get_moderated_text(original_text, state)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(original_text=original_text, moderated_text=moderated_text, plan_date=plan_date)

    kb = get_plan_actions_inline_keyboard().as_markup()
    await message.answer(
        text=f"üìù –¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å (–ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏):\n\n{moderated_text}",
        reply_markup=kb
    )
    await state.set_state(PlanStates.plan_ready)


@dp.callback_query(F.data == "send_obsidian", PlanStates.plan_ready)
async def send_to_obsidian_callback(query: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Obsidian" –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ FastAPI.
    –ü–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    await query.answer()

    data = await state.get_data()
    original_text = data.get("original_text", "")
    moderated_text = data.get("moderated_text", "")
    plan_date = data.get("plan_date", "")
    if not original_text or not moderated_text:
        await query.message.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Obsidian.")
        return

    telegram_user_id = str(query.from_user.id)
    progress_message = await query.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–ª–∞–Ω –≤ Obsidian...")

    async with aiohttp.ClientSession() as session:
        params = {
            "telegram_user_id": telegram_user_id,
            "text": original_text,
            "model_text": moderated_text,
            "plan_date": plan_date,
            "progress_message_id": progress_message.message_id,
            "chat_id": query.message.chat.id,
        }
        async with session.post(f"{FASTAPI_URL}/messages", params=params) as response:
            resp_data = await response.json()

    await query.message.edit_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Obsidian!")
    await state.clear()


@dp.callback_query(F.data == "edit_plan", PlanStates.plan_ready)
async def edit_plan_callback(query: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å" –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    await query.answer()
    await query.message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∞.")
    await state.set_state(PlanStates.editing_plan)


async def start_bot():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(start_bot())
