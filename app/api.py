import asyncio
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from dotenv import load_dotenv

from database import fetch_unread_messages, insert_message, mark_message_as_processed
from typing import Dict

load_dotenv()

app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
active_connections: Dict[str, WebSocket] = {}


@app.post("/messages")
async def add_message(telegram_user_id: str, text: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç WebSocket-–∫–ª–∏–µ–Ω—Ç–æ–≤."""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    message_id = await insert_message(telegram_user_id, text)
    print(message_id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if telegram_user_id in active_connections:
        websocket = active_connections[telegram_user_id]
        data_to_send = {
            "message_id": message_id,
            "type": "new_message",
            "text": text
        }
        print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", data_to_send)
        await websocket.send_json(data_to_send)

        # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        confirmation = await websocket.receive_json()
        if confirmation.get("type") == "confirm" and confirmation.get("message_id") == message_id:
            success = await mark_message_as_processed(message_id)
            if success:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        else:
            print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", confirmation)

    return {"status": "ok", "message": "Message added and sent via WebSocket"}


@app.websocket("/ws/{telegram_user_id}")
async def websocket_endpoint(websocket: WebSocket, telegram_user_id: str):
    await websocket.accept()
    active_connections[telegram_user_id] = websocket
    print(f"üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {telegram_user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = await fetch_unread_messages(telegram_user_id)
    for message in messages:
        data_to_send = {
            "type": "new_message",
            "message_id": message["id"],
            "text": message["text"],
            "created_at": message["created_at"]
        }
        await websocket.send_json(data_to_send)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data_to_send}")

        # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        confirmation = await websocket.receive_json()
        if confirmation.get("type") == "confirm" and confirmation.get("message_id") == message["id"]:
            success = await mark_message_as_processed(message["id"])
            if success:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message['id']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message['id']}")
        else:
            print("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", confirmation)

    try:
        while True:
            await asyncio.sleep(1)
    except WebSocketDisconnect:
        print(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {telegram_user_id}")
        del active_connections[telegram_user_id]


def start_api():
    uvicorn.run(app, host="0.0.0.0", port=8000)


if __name__ == "__main__":
    start_api()