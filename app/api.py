import asyncio
import logging
import time

import requests
import os
from typing import Dict
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from dotenv import load_dotenv
from openai_client import generate_response, generate_claude_response
from database import fetch_unread_messages, insert_message, mark_message_as_processed

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
active_connections: Dict[str, WebSocket] = {}
pending_acks: Dict[str, Dict] = {}  # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

PING_INTERVAL = 30  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
PING_TIMEOUT = 10   # –û–∂–∏–¥–∞–µ–º pong –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
ACK_TIMEOUT = 5     # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π 5 —Å–µ–∫—É–Ω–¥

@app.post("/messages")
async def add_message(telegram_user_id: str, text: str, progress_message_id: int, chat_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –ø–æ WebSocket"""
    model_text = await generate_claude_response(text)
    db_message_id = await insert_message(telegram_user_id, text, model_text, chat_id, progress_message_id)
    print({"progress_message_id": progress_message_id, "chat_id": chat_id})

    logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {db_message_id} –æ—Ç {telegram_user_id}: {text}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if telegram_user_id in active_connections:
        websocket = active_connections[telegram_user_id]
        data_to_send = {
            "db_message_id": db_message_id,
            "type": "new_message",
            "text": text,
            "model_text": model_text,
            "chat_id": chat_id,
            "progress_message_id": progress_message_id
        }
        await send_with_ack(websocket, telegram_user_id, data_to_send)

    return {"status": "ok", "message": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª—å—é!"}

@app.websocket("/ws/{telegram_user_id}")
async def websocket_endpoint(websocket: WebSocket, telegram_user_id: str):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    await websocket.accept()
    active_connections[telegram_user_id] = websocket
    logger.info(f"üì° WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {telegram_user_id}")

    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è pong
    pong_event = asyncio.Event()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–∏–Ω–≥–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è pong_event
    asyncio.create_task(ping_loop(websocket, telegram_user_id, pong_event))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = await fetch_unread_messages(telegram_user_id)
    for message in messages:
        time.sleep(0.1)
        data_to_send = {
            "type": "new_message",
            "db_message_id": message["id"],
            "text": message["text"],
            "created_at": message["created_at"],
            "chat_id": message["chat_id"],
            "progress_message_id": message["progress_message_id"],
            "model_text": message["model_text"],
        }
        await send_with_ack(websocket, telegram_user_id, data_to_send)

    try:
        while True:
            try:
                data = await websocket.receive_json()
            except RuntimeError as e:
                logger.error(f"RuntimeError –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break

            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω pong, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            if data.get("type") == "pong":
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω pong –æ—Ç {telegram_user_id}")
                pong_event.set()
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (ACK)
            if data.get("type") == "confirm":
                db_message_id = data.get("db_message_id")
                progress_message_id = data.get("progress_message_id")
                chat_id = data.get("chat_id")
                if db_message_id in pending_acks.get(telegram_user_id, {}):
                    del pending_acks[telegram_user_id][db_message_id]
                    await mark_message_as_processed(db_message_id)
                    edit_telegram_message(chat_id, progress_message_id, 'üöÄ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {db_message_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {telegram_user_id} progress_message_id - {progress_message_id} chat_id - {chat_id}")
                continue

            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {telegram_user_id}: {data}")

    except WebSocketDisconnect:
        logger.warning(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {telegram_user_id}")
    finally:
        if telegram_user_id in active_connections:
            del active_connections[telegram_user_id]

async def ping_loop(websocket: WebSocket, telegram_user_id: str, pong_event: asyncio.Event):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ping –∏ –æ–∂–∏–¥–∞–Ω–∏—è pong —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ"""
    while telegram_user_id in active_connections:
        await asyncio.sleep(PING_INTERVAL)
        try:
            pong_event.clear()
            await websocket.send_json({"type": "ping"})
            logger.info(f"üì§ Ping -> {telegram_user_id}")
            # –ñ–¥—ë–º, –ø–æ–∫–∞ pong_event –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–ª–∏ –∏—Å—Ç–µ—á—ë—Ç —Ç–∞–π–º–∞—É—Ç
            await asyncio.wait_for(pong_event.wait(), timeout=PING_TIMEOUT)
        except asyncio.TimeoutError:
            logger.warning(f"‚ö†Ô∏è Pong –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç {telegram_user_id} –≤ —Ç–µ—á–µ–Ω–∏–µ {PING_TIMEOUT} —Å–µ–∫—É–Ω–¥, –∑–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            await websocket.close()
            if telegram_user_id in active_connections:
                del active_connections[telegram_user_id]
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ping: {e}")
            break

async def send_with_ack(websocket: WebSocket, telegram_user_id: str, message: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (ACK)"""
    db_message_id = message["db_message_id"]

    if telegram_user_id not in pending_acks:
        pending_acks[telegram_user_id] = {}

    pending_acks[telegram_user_id][db_message_id] = message

    await websocket.send_json(message)
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {db_message_id} -> {telegram_user_id}, –∂–¥–µ–º ACK")

    asyncio.create_task(check_ack_timeout(websocket, telegram_user_id, db_message_id))

async def check_ack_timeout(websocket: WebSocket, telegram_user_id: str, db_message_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ ACK –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await asyncio.sleep(ACK_TIMEOUT)
    if telegram_user_id in pending_acks and db_message_id in pending_acks[telegram_user_id]:
        logger.error(f"‚ùå ACK –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {db_message_id} –æ—Ç {telegram_user_id}")
        del pending_acks[telegram_user_id][db_message_id]


def edit_telegram_message(chat_id: int, message_id: int, new_text: str):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –ø–æ –µ–≥–æ chat_id –∏ message_id.

    :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    :param new_text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/editMessageText"
    data = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": new_text
    }

    try:
        response = requests.post(url, data=data, timeout=5)
        response.raise_for_status()
        result = response.json()

        if result.get("ok"):
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {result}")
            return False

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API: {e}")
        return False

def start_api():
    """–ó–∞–ø—É—Å–∫ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    start_api()
